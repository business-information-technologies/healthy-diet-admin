{
	// Place your menulery workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Basic NextJS Zod Validation Form": {
		"scope": "typescriptreact",
		"prefix": "zdf",
		"body": [
			"\"use client\"",
			"",
			"import { z } from \"zod\"",
			"import { zodResolver } from \"@hookform/resolvers/zod\"",
			"import { useForm } from \"react-hook-form\";",
			"import { useTransition } from \"react\";",
			"import { toast } from \"sonner\"",
			"import { usePathname, useRouter } from \"next/navigation\";",
			"import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";",
			"import { Input } from \"@/components/ui/input\";",
			"import { Button } from \"@/components/ui/button\";",
			"import { Loader2 } from \"lucide-react\";",
			"import { cn } from \"@/lib/utils\";",
			"",
			"const formSchema = z.object({",
			"\tname: z.string().min(2)",
			"})",
			"",
			"export default function ${1}() {",
			"\tconst [isPending, startTransition] = useTransition();",
			"",
			"\tconst router = useRouter();",
			"",
			"\tconst form = useForm<z.infer<typeof formSchema>>({",
			"\t\tresolver: zodResolver(formSchema),",
			"\t\tdefaultValues: {",
			"\t\t\tname: \"\",",
			"\t\t},",
			"\t})",
			"",
			"\tfunction onSubmit(values: z.infer<typeof formSchema>) {",
			"\t\tstartTransition(async () => {",
			"\t\t\ttoast(\"Form submitted\")",
			"\t\t\trouter.push('/')",
			"\t\t})",
			"\t}",
			"",
			"\treturn (",
			"\t\t<Form {...form}>",
			"\t\t\t<form onSubmit={form.handleSubmit(onSubmit)} className=\"flex flex-col space-y-3\">",
			"\t\t\t\t<FormField",
			"\t\t\t\t\tcontrol={form.control}",
			"\t\t\t\t\tname='name'",
			"\t\t\t\t\trender={({ field }) => (",
			"\t\t\t\t\t\t<FormItem>",
			"\t\t\t\t\t\t\t<FormLabel>",
			"\t\t\t\t\t\t\t\tName",
			"\t\t\t\t\t\t\t</FormLabel>",
			"\t\t\t\t\t\t\t<FormControl>",
			"\t\t\t\t\t\t\t\t<Input type=\"text\" placeholder=\"Name\" {...field} />",
			"\t\t\t\t\t\t\t</FormControl>",
			"\t\t\t\t\t\t\t<FormMessage />",
			"\t\t\t\t\t\t</FormItem>",
			"\t\t\t\t\t)}",
			"\t\t\t\t/>",
			"\t\t\t\t<div className=\"flex flex-row-reverse\">",
			"\t\t\t\t\t<Button type=\"submit\" className=\"flex gap-2\">",
			"\t\t\t\t\t\t<Loader2 className={cn(\"mr-2 h-4 w-4 animate-spin\", { \"hidden\": !isPending })} />Submit",
			"\t\t\t\t\t</Button>",
			"\t\t\t\t</div>",
			"\t\t\t</form>",
			"\t\t</Form>",
			"\t);",
			"}",
		],
		"description": "Zod Validation Form"
	},
	"Zod Shadcn Form - Text Input": {
		"scope": "typescriptreact",
		"prefix": "zdf-txt",
		"body": [
			"<FormField",
			"\tcontrol={form.control}",
			"\tname='${1}'",
			"\trender={({ field }) => (",
			"\t\t<FormItem>",
			"\t\t\t<FormLabel>",
			"\t\t\t\t${2}",
			"\t\t\t</FormLabel>",
			"\t\t\t<FormControl>",
			"\t\t\t\t<Input type=\"text\" placeholder=\"${3}\" {...field} />",
			"\t\t\t</FormControl>",
			"\t\t\t<FormMessage />",
			"\t\t</FormItem>",
			"\t)}",
			"/>"
		],
		"description": "Zod Shadcn Form - Text Input"
	},
	"Zod Shadcn Form - Textarea": {
		"scope": "typescriptreact",
		"prefix": "zdf-txtarea",
		"body": [
			"<FormField",
			"\tcontrol={form.control}",
			"\tname='${1}'",
			"\trender={({ field }) => (",
			"\t\t<FormItem>",
			"\t\t\t<FormLabel>",
			"\t\t\t\t${2}",
			"\t\t\t</FormLabel>",
			"\t\t\t<FormControl>",
			"\t\t\t\t<Textarea placeholder=\"${3}\" {...field} />",
			"\t\t\t</FormControl>",
			"\t\t\t<FormMessage />",
			"\t\t</FormItem>",
			"\t)}",
			"/>"
		],
		"description": "Zod Shadcn Form - Textarea"
	}
}